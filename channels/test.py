from channels import Base


class Test(Base):

    async def run(self):
        if self.message.content.startswith('!test'):
            result_string = ''
            await self.message.delete()
            if self.message.content.find('result____') != -1:
                await self.message.channel.send('–í –≤–∞—à–µ–º –∫–æ–¥–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å –∏–º–µ–Ω–µ–º "result____".'
                                                ' –ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –µ—ë –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
                return

            if self.message.content.find('func(') != -1:
                await self.message.channel.send('–í –≤–∞—à–µ–º –∫–æ–¥–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–ª–∏ –º–µ—Ç–æ–¥ "func". –ò—Å–ø—Ä–∞–≤—å –ø–∂')
            text = self.message.content.split('\n')
            task_name = self.get_task_name(text[0], '!test')
            code = text[1:]
            task = self.bot.db.get_task_by_name(task_name)
            if code:
                await self.message.channel.send("–¢–µ—Å—Ç–∏—Ä—É—é. –ü–æ–ø–µ–π —á–∞—é üçµ")
                code = self.bot.transform_code(code, task)
                for i in range(len(code)):
                    if self.bot.run_code(code[i], task.tests[i].output):
                        result_string += f'‚úÖ –¢–µ—Å—Ç {i} - —É—Å–ø–µ—à–Ω–æ\n'
                    else:
                        result_string += f'‚ùå –¢–µ—Å—Ç {i} - –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç\n'

                await self.message.channel.send(f'```\n{result_string}```')
